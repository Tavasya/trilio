import { useState, useEffect, useRef } from 'react';

const businessStats = [
  {
    number: "80%",
    text: "of all B2B social leads drove by LinkedIn, the #1 platform for B2B growth."
  },
  {
    number: "82%",
    text: "of buyers trust companies whose founders are active online."
  },
  {
    number: "8x",
    text: "more engagement is generated by personal posts compared to company posts"
  },
  {
    number: "49%",
    text: "of a company's reputation is directly tied to its CEO"
  }
];

const studentStats = [
  {
    number: "87%",
    text: "of recruiters use LinkedIn to find candidates"
  },
  {
    number: "70%",
    text: "of people get hired at companies where they have a connection"
  },
  {
    number: "40%",
    text: "higher response rate when you have optimized keywords"
  },
  {
    number: "5x",
    text: "more likely to get contacted with an active, keyword-rich profile"
  }
];

interface LeverageSectionProps {
  mode?: 'business' | 'student';
}

export default function LeverageSection({ mode = 'business' }: LeverageSectionProps) {
  const stats = mode === 'business' ? businessStats : studentStats;
  const [visibleItems, setVisibleItems] = useState<number[]>([]);
  const itemRefs = useRef<(HTMLDivElement | null)[]>([]);
  const headerRef = useRef<HTMLDivElement | null>(null);
  const [headerVisible, setHeaderVisible] = useState(false);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.target === headerRef.current && entry.isIntersecting) {
            setHeaderVisible(true);
          } else if (entry.isIntersecting) {
            const index = itemRefs.current.indexOf(entry.target as HTMLDivElement);
            if (index !== -1 && !visibleItems.includes(index)) {
              setTimeout(() => {
                setVisibleItems(prev => [...prev, index]);
              }, index * 150);
            }
          }
        });
      },
      { threshold: 0.1, rootMargin: '0px 0px -50px 0px' }
    );

    if (headerRef.current) observer.observe(headerRef.current);

    setTimeout(() => {
      itemRefs.current.forEach((ref) => {
        if (ref) observer.observe(ref);
      });
    }, 100);

    return () => observer.disconnect();
  }, []);

  return (
    <div className="relative">
      {/* Top section with primary background and white curved indent */}
      <div className="h-16 bg-primary">
        <div className="h-full bg-white rounded-b-[3rem]"></div>
      </div>

      {/* Main content - full width primary */}
      <div className="bg-primary py-20">
        <div className="max-w-6xl mx-auto px-6">
          <div ref={headerRef} className={`transition-all duration-700 ${
            headerVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
          }`}>
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-4 text-center">
              {mode === 'business' ? "If you don't show up, your competitor will." : "It's not about going viral, it's about being found."}
            </h2>

            <p className="text-xl text-white/90 text-center mb-12">
              {mode === 'business' ? "Here's why founders can't afford to stay invisible:" : "Here's why optimizing your LinkedIn matters for your career:"}
            </p>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-4 gap-8 max-w-6xl mx-auto">
            {stats.map((stat, index) => (
              <div
                key={index}
                ref={(el) => {itemRefs.current[index] = el}}
                className={`text-center transition-all duration-700 ${
                  visibleItems.includes(index)
                    ? 'opacity-100 translate-y-0'
                    : 'opacity-0 translate-y-12'
                }`}
              >
                <div className="text-6xl md:text-7xl font-bold text-white mb-3">
                  {stat.number}
                </div>
                <p className="text-base text-white/80">
                  {stat.text}
                </p>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Bottom section with primary background and white curved indent */}
      <div className="h-16 bg-primary">
        <div className="h-full bg-white rounded-t-[3rem]"></div>
      </div>
    </div>
  );
}